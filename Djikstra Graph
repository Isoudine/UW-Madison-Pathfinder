// --== CS400 File Header Information ==--
// Name: Haochen He
// Email: hhe92@wisc.edu
// Group and Team: G11
// Group TA: Grant Waldow
// Lecturer: Florian
// Notes to Grader: Monday's Junit tests

import java.util.PriorityQueue;
import java.util.List;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;


/**
 * This class extends the BaseGraph data structure with additional methods for
 * computing the total cost and list of node data along the shortest path
 * connecting a provided starting to ending nodes. This class makes use of
 * Dijkstra's shortest path algorithm.
 */
public class DijkstraGraph<NodeType, EdgeType extends Number>
        extends BaseGraph<NodeType, EdgeType>
        implements GraphADT<NodeType, EdgeType> {

    /**
     * While searching for the shortest path between two nodes, a SearchNode
     * contains data about one specific path between the start node and another
     * node in the graph. The final node in this path is stored in its node
     * field. The total cost of this path is stored in its cost field. And the
     * predecessor SearchNode within this path is referened by the predecessor
     * field (this field is null within the SearchNode containing the starting
     * node in its node field).
     *
     * SearchNodes are Comparable and are sorted by cost so that the lowest cost
     * SearchNode has the highest priority within a java.util.PriorityQueue.
     */
    protected class SearchNode implements Comparable<SearchNode> {
        public Node node;
        public double cost;
        public SearchNode predecessor;

        public SearchNode(Node node, double cost, SearchNode predecessor) {
            this.node = node;
            this.cost = cost;
            this.predecessor = predecessor;
        }

        public int compareTo(SearchNode other) {
            if (cost > other.cost)
                return +1;
            if (cost < other.cost)
                return -1;
            return 0;
        }
    }

    /**
     * Constructor that sets the map that the graph uses.
     * @param map the map that the graph uses to map a data object to the node
     *        object it is stored in
     */
    public DijkstraGraph(MapADT<NodeType, Node> map) {
        super(map);
    }

    /**
     * This helper method creates a network of SearchNodes while computing the
     * shortest path between the provided start and end locations. The
     * SearchNode that is returned by this method is represents the end of the
     * shortest path that is found: it's cost is the cost of that shortest path,
     * and the nodes linked together through predecessor references represent
     * all of the nodes along that shortest path (ordered from end to start).
     *
     * @param start the data item in the starting node for the path
     * @param end   the data item in the destination node for the path
     * @return SearchNode for the final end node within the shortest path
     * @throws NoSuchElementException when no path from start to end is found
     *                                or when either start or end data do not
     *                                correspond to a graph node
     */
    protected SearchNode computeShortestPath(NodeType start, NodeType end) {
        // implement in step 5.3
        if(!this.containsNode(start) || !this.containsNode(end))
          throw new NoSuchElementException("Invalid start/end node\n");

        PriorityQueue<SearchNode> queue = new PriorityQueue<>();
        MapADT<NodeType, SearchNode> map = new PlaceholderMap<>();

        SearchNode startNode = new SearchNode(nodes.get(start), 0.0, null);
        queue.add(startNode); // initialize priority queue
        map.put(start, startNode); // initialize hashmap

        while(!queue.isEmpty()) {
          SearchNode curNode = queue.poll();

          // iterate through every edge
          for(Edge edge : curNode.node.edgesLeaving) {
            Node nextNode = edge.successor;
            double cost = curNode.cost + edge.data.doubleValue();
            // haven't visited or needs update
            if(!map.containsKey(nextNode.data)) {
              SearchNode tmpNode = new SearchNode(nextNode, cost, curNode);
              map.put(nextNode.data, tmpNode);
              queue.add(tmpNode);
            } else if(map.get(nextNode.data).cost > cost) { // same as above but remove key first
              map.remove(nextNode.data);
              SearchNode tmpNode = new SearchNode(nextNode, cost, curNode);
              map.put(nextNode.data, tmpNode);
              queue.add(tmpNode);
            }
          }
        }

        if (!map.containsKey(end)) {
          throw new NoSuchElementException("No path found\n");
        }

        return map.get(end);
    }

    /**
     * Returns the list of data values from nodes along the shortest path
     * from the node with the provided start value through the node with the
     * provided end value. This list of data values starts with the start
     * value, ends with the end value, and contains intermediary values in the
     * order they are encountered while traversing this shorteset path. This
     * method uses Dijkstra's shortest path algorithm to find this solution.
     *
     * @param start the data item in the starting node for the path
     * @param end   the data item in the destination node for the path
     * @return list of data item from node along this shortest path
     */
    public List<NodeType> shortestPathData(NodeType start, NodeType end) {
        // implement in step 5.4
        try {
          SearchNode endNode = computeShortestPath(start, end);
          List<NodeType> path = new LinkedList<>();

          // Adding to the front of the list
          while (endNode != null) {
            path.add(0, endNode.node.data);
            endNode = endNode.predecessor;
          }

          return path;
        } catch(NoSuchElementException e) {
          throw new NoSuchElementException(e.getMessage());
        }
	}

    /**
     * Returns the cost of the path (sum over edge weights) of the shortest
     * path freom the node containing the start data to the node containing the
     * end data. This method uses Dijkstra's shortest path algorithm to find
     * this solution.
     *
     * @param start the data item in the starting node for the path
     * @param end   the data item in the destination node for the path
     * @return the cost of the shortest path between these nodes
     */
    public double shortestPathCost(NodeType start, NodeType end) {
        // implement in step 5.4
        try {
          SearchNode endNode = computeShortestPath(start, end);
          return endNode.cost;
        } catch(NoSuchElementException e) {
          throw new NoSuchElementException(e.getMessage());
        }
    }

    // TODO: implement 3+ tests in step 4.1
    /**
     * Test on the results of a valid path in the graph using an example from
     * lecture slides
     */
    @Test
    public void testValidPathOne() {
	DijkstraGraph<String, Double> graph = new DijkstraGraph<>(new PlaceholderMap<>());
	graph.insertNode("A");
	graph.insertNode("B");
	graph.insertNode("C");
	graph.insertNode("D");
	graph.insertNode("E");
	graph.insertNode("F");
	graph.insertNode("H");
	graph.insertNode("G");
	graph.insertEdge("A", "B", 4.0);
	graph.insertEdge("A", "C", 2.0);
	graph.insertEdge("A", "E", 15.0);
	graph.insertEdge("B", "D", 1.0);
	graph.insertEdge("B", "E", 10.0);
	graph.insertEdge("C", "D", 5.0);
	graph.insertEdge("D", "E", 3.0);
	graph.insertEdge("D", "F", 0.0);
	graph.insertEdge("F", "D", 2.0);
	graph.insertEdge("F", "H", 4.0);
	graph.insertEdge("G", "H", 4.0);
	Assertions.assertEquals(2.0, graph.shortestPathCost("A", "C"), "Invalid Node A to Node C cost\n");
    }

    /**
     * Test on the costs of a valid path in the graph using an example from
     * lecture slides
     */
    @Test
    public void testValidPathTwo() { 
        DijkstraGraph<String, Double> graph = new DijkstraGraph<>(new PlaceholderMap<>());
        graph.insertNode("A");
        graph.insertNode("B");
        graph.insertNode("C");
        graph.insertNode("D");
        graph.insertNode("E");
        graph.insertNode("F");
        graph.insertNode("H");
        graph.insertNode("G");
        graph.insertEdge("A", "B", 4.0);
        graph.insertEdge("A", "C", 2.0);
        graph.insertEdge("A", "E", 15.0);
        graph.insertEdge("B", "D", 1.0);
        graph.insertEdge("B", "E", 10.0);
        graph.insertEdge("C", "D", 5.0);
        graph.insertEdge("D", "E", 3.0);
        graph.insertEdge("D", "F", 0.0);
        graph.insertEdge("F", "D", 2.0);
        graph.insertEdge("F", "H", 4.0);
        graph.insertEdge("G", "H", 4.0);
	Assertions.assertEquals(5.0, graph.shortestPathCost("A", "D"), "Invalid Node A to Node D cost\n");
    	DijkstraGraph<String, Double>.SearchNode result = graph.computeShortestPath("A", "D");
	Assertions.assertEquals(5.0, result.cost, "Wrong cost from Node A to Node D\n");
	Assertions.assertEquals(4.0, result.predecessor.cost, "Wrong cost from Node A to Node B\n");
    }

    /**
     * Test on the results of an invalid path in the graph using an example from
     * lecture slide
     */
    @Test
    public void testInvalidPath() {
        DijkstraGraph<String, Double> graph = new DijkstraGraph<>(new PlaceholderMap<>());
        graph.insertNode("A");
        graph.insertNode("B");
        graph.insertNode("C");
        graph.insertNode("D");
        graph.insertNode("E");
        graph.insertNode("F");
        graph.insertNode("H");
        graph.insertNode("G");
        graph.insertEdge("A", "B", 4.0);
        graph.insertEdge("A", "C", 2.0);
        graph.insertEdge("A", "E", 15.0);
        graph.insertEdge("B", "D", 1.0);
        graph.insertEdge("B", "E", 10.0);
        graph.insertEdge("C", "D", 5.0);
        graph.insertEdge("D", "E", 3.0);
        graph.insertEdge("D", "F", 0.0);
        graph.insertEdge("F", "D", 2.0);
        graph.insertEdge("F", "H", 4.0);
        graph.insertEdge("G", "H", 4.0);
	// Assuming that invalid path throws NoSuchElementException
      boolean flag = false;
      try {
        Double tmp = graph.shortestPathCost("H", "G");
      } catch(NoSuchElementException e) {
        flag = true;
      }
      Assertions.assertEquals(true, flag, "No exception thrown\n");
    }
}
